<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Enemy List
//enemy[0] = obj_enemy_hag;
enemy[1] = obj_enemy_pigman;
enemy[2] = obj_bugs;
enemy[3] = obj_duck;
enemy[4] = obj_enemy_hellpig;
enemy[5] = obj_hand;

//Menu Index
menu_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_player))
{
    while (instance_number(obj_enemy_lifeform) &lt;= 5)
    {
        // Create positive/negative range for x, y
        var randnegx = (irandom_range(-150, -50));// or (irandom_range(50, 150))
        var randnegy = (irandom_range(-150, -50));// or (irandom_range(50, 150))
        var randposx = (irandom_range(150, 50));// or (irandom_range(50, 150))
        var randposy = (irandom_range(150, 50));// or (irandom_range(50, 150))
        
        //Choose positive/negative range
        var randx = choose(randnegx, randposx);
        var randy = choose(randnegy, randposy);
       
        var spawnx = (obj_player.x + randx);// or (obj_player.x - irandom_range(randx, randy)));
        var spawny = (obj_player.y + randy);// or (obj_player.y - irandom_range(randx, randy)));
        
        randindex = irandom_range(enemy[0], enemy[5])
        rande = randindex;
        
        //Create Pigman at random x, y
        instance_create(spawnx, spawny, rande);
        //show_message("X: " + string(spawnx) + "   Y: " + string(spawny))
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Backup Run spawner

if(instance_exists(obj_player))
{
    while (instance_number(obj_enemy_pigman) &lt;= 3)
    {
        // Create positive/negative range for x, y
        var randnegx = (irandom_range(-150, -50));// or (irandom_range(50, 150))
        var randnegy = (irandom_range(-150, -50));// or (irandom_range(50, 150))
        var randposx = (irandom_range(150, 50));// or (irandom_range(50, 150))
        var randposy = (irandom_range(150, 50));// or (irandom_range(50, 150))
        
        //Choose positive/negative range
        var randx = choose(randnegx, randposx);
        var randy = choose(randnegy, randposy);
       
        var spawnx = (obj_player.x + randx);// or (obj_player.x - irandom_range(randx, randy)));
        var spawny = (obj_player.y + randy);// or (obj_player.y - irandom_range(randx, randy)));
        
        //Create Pigman at random x, y
        instance_create(spawnx, spawny, obj_enemy_pigman);
        //show_message("X: " + string(spawnx) + "   Y: " + string(spawny))
    }
}



/*
if(instance_number(obj_enemy_pigman) &lt; 2)
    {
    //var nearest_tree = obj_tree;
    treex = (instance_nearest(x, y, nearest_tree).x);
    treey = (instance_nearest(x, y, nearest_tree).y);
    
    while(point_distance(obj_player.x, obj_player.y, treex, treey) &gt; 1)
    {
        instance_create(treex, treey, obj_enemy_pigman);
        show_message("X: " + string(treex) + "   Y: " + string(treey))
    }
}





/// Run spawner
while (instance_number(obj_enemy_pigman) &lt;= 2)
{
    // Find a random X position in the room
    var randx = random(room_width);
    // Find a random Y position in the room
    var randy = random(room_height);

    // If the random position is empty
    if position_empty(randx, randy)
    {
        // If there is a block
        // 16 pixels under
        // the random Y position
        // (the sprite of obj_enemy is 32x32 pixels)
        //if place_meeting(randx, randy, obj_wall)
        //if point_distance(obj_player.x, obj_player.y, x, y) &gt; 50
        {
           // Create an ennemy
           show_message("X: " + string(randx) + "   Y: " + string(randy))
           instance_create((obj_player.x + irandom_range(20, 30)), (obj_player.x + irandom_range(20, 30)), obj_enemy_pigman);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
