<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player's stats + Global Font
hp = 5; //5
maxhp = hp;
stamina = 10; //10
maxstamina = stamina;
expr = 6;
maxexpr = 7;
level = 1;
attack = 1; //.5
eyes = 0; //0
wood = 0;
playerammo = 10; //5
ediblemeat = 5; //4
pages = 0;

// * Test Stats
fuel = 10;

//Story Items
necronomicon = false;
pills = false;

//Global Font Size
draw_set_color(c_white);
global.fontsize = 64;

// Get player's xstart and ystart
if (instance_exists(obj_player)) {
  player_xstart = obj_player.x;
  player_ystart = obj_player.y;
} else {
  player_xstart = 0;
  player_ystart = 0;
}

//Save previous room
previous_room = room;

room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stamina regen alarm

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the stats / Pause Menu / Death / Cat text
if(instance_exists(obj_player))
{
    // Pause the game
    if (obj_input.pause_key)
    {
        if (room != rm_pause)
        {
            if (instance_exists(obj_player))
            {
                obj_player.persistent = false;
                //obj_darkness.persistent = false;
            }
            previous_room = room;
            room_persistent = true;
            room_goto(rm_pause);
        }
        else
        {
            room_goto(previous_room);
        }
        obj_input.pause_key = false;
    }   
    
    //Death / deathroom
    if(hp &lt;= 0)
    {   
        //show_message("You ded.")
        if(room != rm_deathroom)
        {
            room_goto(rm_deathroom);
            if(instance_exists(obj_player))
            {
                obj_player.persistent = false;
                //obj_darkness.persistent = false;
            }
        }
    }

}

// Create Cat Summon alert
var summon = false;
if(instance_exists(obj_blackcat) &amp;&amp; summon == false)
{
    instance_create(x, y, obj_catsummon)
    summon = true;
}


    /*
    //Create health blackcat INFINITE -- Moved to move_state
    // Create positive/negative range for x, y
    if(obj_player_stats.hp &lt;= (obj_player_stats.maxhp/2))
    {
        if(instance_exists(obj_blackcat))
        {
            //Do nothing
        }
        else
        {
            scr_blackcat();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remember the player's start position
if (room == rm_pause) exit;

switch(room_start_action)
{
    case RETURN:
        break;
        
    case NEW_ROOM:
    default:
        if(instance_exists(obj_player))
        {
            player_xstart = obj_player.x;
            player_ystart = obj_player.y;
        }
        break;
        
    case LOAD:
        scr_load_game();
        break;   
}

room_persistent = false;
room_start_action = NEW_ROOM;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the stats
  var scale = 3;
//Font Properties
  draw_set_halign(fa_left);
  draw_set_valign(fa_middle);
  draw_set_font(fnt_general);

//Draw Stats ---------------------------------------------------------------------------------------------------

    //Draw Level
    draw_text(28, 20, "Level: " + string(level));
    
    //Draw HP
    //draw_text(28, 36, "HP: ")
    //draw_text(250, 40, string(hp) + "/" + string(maxhp));
    hpcolor = make_colour_rgb(105, 29, 21)
    draw_rectangle_colour(29, 34, 226, 51, hpcolor, hpcolor, hpcolor, hpcolor, true)
    draw_healthbar(30, 35, 225, 50, ((obj_player_stats.hp/obj_player_stats.maxhp) * 100), c_gray, hpcolor, c_red, 0, true, true)
    
    //Draw Stamina
    //draw_text(28, 52, "STM: ")
    //draw_text(225, 60, string(stamina) + "/" + string(maxstamina));
    stamcolor = make_colour_rgb(255, 204, 102)
    draw_rectangle_colour(29, 54, 226, 66, stamcolor, stamcolor, stamcolor, stamcolor, true)
    draw_healthbar(30, 55, 225, 65, ((obj_player_stats.stamina/obj_player_stats.maxstamina) * 100), c_gray, stamcolor, c_yellow, 0, true, true)
    
    //Draw Experience
    //draw_text(28, 68, "EXP: ")
    //draw_text(225, 80, string(expr) + "/" + string(maxexpr));
    xpcolor = make_colour_rgb(102, 204, 255)
    draw_rectangle_colour(29, 69, 226, 76, xpcolor, xpcolor, xpcolor, xpcolor, true)
    draw_healthbar(30, 70, 225, 75, ((obj_player_stats.expr/obj_player_stats.maxexpr) * 100), c_gray, xpcolor, c_aqua, 0, true, true)
    
//Stat descriptions ------------------------------------------------------------------------------------------

    //Draw Attack
    //draw_text(28, 116, "Attack: " + string(attack)) 
    
    //Draw Ammo
    ammocolor = make_colour_rgb(255, 255, 255) //217, 217, 217
    draw_sprite_ext(spr_ammo, 1, 45, 100, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text_colour(55, 100, "  " + string(playerammo), ammocolor, ammocolor, ammocolor, ammocolor, image_alpha)
    
    //Draw Meat
    meatcolor = make_colour_rgb(255, 255, 255) //255, 102, 102
    draw_sprite_ext(spr_ediblemeat, 1, 45, 132, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text_colour(55, 132, "  " + string(ediblemeat), meatcolor, meatcolor, meatcolor, meatcolor, image_alpha)
    
    //Draw Pages
    woodcolor = make_colour_rgb(255, 255, 255) //153, 102, 51
    draw_sprite_ext(spr_necronomicon_page, 1, 45, 164, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text_colour(55, 164, "  " + string(pages), woodcolor, woodcolor, woodcolor, woodcolor, image_alpha)
    
    //Draw Eyes
    eyecolor = make_colour_rgb(255, 255, 255) //153, 204, 255
    draw_sprite_ext(spr_eye, 1, 45, 196, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text_colour(55, 196, "  " + string(eyes), eyecolor, eyecolor, eyecolor, eyecolor, image_alpha);
    
    //Draw Wood
    woodcolor = make_colour_rgb(255, 255, 255)
    draw_sprite_ext(spr_woodlog, 1, 45, 228, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text_colour(55, 228, "  " + string(wood), woodcolor, woodcolor, woodcolor, woodcolor, image_alpha);
    


/*
Text backup
/// Draw the stats
var scale = 3;
//Font Properties
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fnt_general);

//Draw Stats ---------------------------------------------------------------------------------------------------

    //Draw Level
    draw_text(28, 20, "LVL: " + string(level));
    
    //Draw HP
    //draw_text(28, 36, "HP: ")
    draw_text(225, 36, string(hp) + "/" + string(maxhp));
    draw_healthbar(70, 42, 220, 28, ((obj_player_stats.hp/obj_player_stats.maxhp) * 100), c_gray, c_red, c_red, 0, true, true)
    
    //Draw Stamina
    //draw_text(28, 52, "STM: ")
    draw_text(225, 52, string(stamina) + "/" + string(maxstamina));
    draw_healthbar(70, 58, 220, 44, ((obj_player_stats.stamina/obj_player_stats.maxstamina) * 100), c_gray, c_orange, c_yellow, 0, true, true)
    
    //Draw Experience
    //draw_text(28, 68, "EXP: ")
    draw_text(225, 68, string(expr) + "/" + string(maxexpr));
    draw_healthbar(70, 74, 220, 60, ((obj_player_stats.expr/obj_player_stats.maxexpr) * 100), c_gray, c_blue, c_aqua, 0, true, true)
    
//Stat descriptions ------------------------------------------------------------------------------------------

    //Draw Attack
    draw_text(28, 116, "Attack: " + string(attack)) 
    
    //Draw Ammo
    draw_sprite_ext(spr_ammo, 1, 34, 148, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text(48, 148, " :  " + string(playerammo))
    
    //Draw Meat
    draw_sprite_ext(spr_ediblemeat, 1, 34, 180, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text(48, 180, " :  " + string(ediblemeat))
    
    //Draw Wood
    draw_sprite_ext(spr_woodlog, 1, 34, 212, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text(48, 212, " :  " + string(wood))
    
    //Draw Eyes
    draw_sprite_ext(spr_eye, 1, 34, 244, image_xscale*scale, image_yscale*scale, 0, c_white, image_alpha)
    draw_text(48, 244, " :  " + string(eyes));


//Draw current weapon
//var weapon = obj_player.weapon_sprite.sprite_index;
//draw_text(28, 86, "Weapon: " + string(weapon))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
